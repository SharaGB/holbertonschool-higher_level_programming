=============================
The ``7-base_geometry` module
=============================

Using ``base_geometry``
-------------------

::
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Case: normal.
::
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0

Case: if value == 0.
::
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("integer", 0)
    Traceback (most recent call last):
        ...
    ValueError: integer must be greater than 0

Case: if value < 0.
::
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("integer", -6)
    Traceback (most recent call last):
        ...
    ValueError: integer must be greater than 0

Case: if a string.
::
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Hello", "World")
    Traceback (most recent call last):
        ...
    TypeError: Hello must be an integer

Case: with float.
::
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("float", 2.5)
    Traceback (most recent call last):
        ...
    TypeError: float must be an integer

Case: if floats.
::
    >>> bg = BaseGeometry()
    >>> bg.integer_validator(6.66, 2.5)
    Traceback (most recent call last):
        ...
    TypeError: 6.66 must be an integer

Case: if area fails.
::
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

Case: if you do not pass arguments.
::
    >>> bg = BaseGeometry()
    >>> bg.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Case: with an argument.
::
    >>> bg = BaseGeometry()
    >>> bg.integer_validator(6)
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Case: if a tuple.
::
    >>> bg = BaseGeometry()
    >>> bg.integer_validator((1, 2), (3, 4))
    Traceback (most recent call last):
        ...
    TypeError: (1, 2) must be an integer

Case: if a list.
::
    >>> bg = BaseGeometry()
    >>> bg.integer_validator(["integers"], [4, 5, 6])
    Traceback (most recent call last):
        ...
    TypeError: ['integers'] must be an integer